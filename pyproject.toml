[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "plant-mgc-analysis"
version = "0.1.0"
description = "Plant Metabolic Gene Cluster Analysis Pipeline - A comprehensive bioinformatics toolkit for identifying and analyzing biosynthetic gene clusters in plant genomes"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Itay Mayrose Lab", email = "itay.mayrose@example.com"},
]
maintainers = [
    {name = "Itay Mayrose Lab", email = "itay.mayrose@example.com"},
]
keywords = [
    "bioinformatics",
    "genomics",
    "plant-biology",
    "metabolic-pathways",
    "gene-clusters",
    "secondary-metabolism",
    "phylogenomics",
    "machine-learning",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
dependencies = [
    # Core scientific computing
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    
    # Bioinformatics
    "biopython>=1.79",
    "pybedtools>=0.9.0",
    
    # Machine learning
    "scikit-learn>=1.0.0",
    "tensorflow>=2.8.0",
    "joblib>=1.0.0",
    
    # Web and data processing
    "requests>=2.25.0",
    "aiohttp>=3.8.0",
    "beautifulsoup4>=4.9.0",
    
    # CLI and configuration
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "rich>=12.0.0",
    "typer>=0.7.0",
    
    # Utilities
    "tqdm>=4.60.0",
    "loguru>=0.6.0",
    "pathlib2>=2.3.0",
    
    # Data visualization
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    
    # Statistical analysis
    "statsmodels>=0.13.0",
    "networkx>=2.6.0",
    
    # File processing
    "openpyxl>=3.0.0",
    "xlsxwriter>=3.0.0",
    
    # Parallel processing
    "dask>=2021.0.0",
    "multiprocessing-logging>=0.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinxcontrib-mermaid>=0.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.0.0",
    "factory-boy>=3.2.0",
]
performance = [
    "numba>=0.56.0",
    "cython>=0.29.0",
    "polars>=0.15.0",
]
gpu = [
    "cupy-cuda11x>=10.0.0",
    "rapids-cudf>=22.0.0",
]

[project.urls]
Homepage = "https://github.com/itay-mayrose/plant-mgc-analysis"
Documentation = "https://plant-mgc-analysis.readthedocs.io/"
Repository = "https://github.com/itay-mayrose/plant-mgc-analysis"
Issues = "https://github.com/itay-mayrose/plant-mgc-analysis/issues"
Changelog = "https://github.com/itay-mayrose/plant-mgc-analysis/blob/main/CHANGELOG.md"

[project.scripts]
plant-mgc = "plant_mgc_analysis.cli:main"
mgc-pipeline = "plant_mgc_analysis.cli:pipeline"
mgc-analyze = "plant_mgc_analysis.cli:analyze"
mgc-predict = "plant_mgc_analysis.cli:predict"

[tool.setuptools.packages.find]
where = ["src"]
include = ["plant_mgc_analysis*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
plant_mgc_analysis = [
    "data/**/*",
    "config/**/*",
    "models/**/*",
    "templates/**/*",
]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=plant_mgc_analysis",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "network: marks tests that require network access",
]

# Code formatting with Black
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["plant_mgc_analysis"]
known_third_party = [
    "numpy",
    "pandas",
    "scipy",
    "sklearn",
    "tensorflow",
    "Bio",
    "click",
    "pydantic",
    "loguru",
    "tqdm",
    "matplotlib",
    "seaborn",
    "plotly",
    "requests",
    "aiohttp",
]

# Type checking with mypy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "pybedtools.*",
    "sklearn.*",
    "tensorflow.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "statsmodels.*",
    "networkx.*",
    "dask.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src/plant_mgc_analysis"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Documentation with Sphinx
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
all-files = true